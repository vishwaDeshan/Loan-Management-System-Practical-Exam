@model LoanManagementSystemAssignment.ViewModels.LoanApplicationViewModel
@using LoanManagementSystemAssignment.Enums
@using LoanManagementSystemAssignment.Models
@using Microsoft.AspNetCore.Mvc.Rendering

@{
    ViewData["Title"] = "Add Loan Application";
}

<div class="container mt-4 pb-2">
    <div class="card shadow-lg rounded-lg p-4 form-card">
        <h2 class="mb-4 text-center">@ViewData["Title"]</h2>

        <form asp-action="Add" method="post" id="addLoanForm">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <div class="form-group mb-3">
                <label asp-for="CustomerName" class="form-label">Customer Name</label>
                <input asp-for="CustomerName" class="form-control" />
                <span asp-validation-for="CustomerName" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="NicPassport" class="form-label">NIC/Passport</label>
                <input asp-for="NicPassport" class="form-control" />
                <span asp-validation-for="NicPassport" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <div class="row">
                    <div class="col-md-6">
                        <label asp-for="LoanType" class="form-label">Loan Type</label>
                        <select asp-for="LoanType" class="form-control" id="LoanType"
                                asp-items="@(new SelectList(Enum.GetNames(typeof(LoanType))))">
                            <option value="">Select Loan Type</option>
                        </select>
                        <span asp-validation-for="LoanType" class="text-danger"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="InterestRate" class="form-label">Interest Rate (%)</label>
                        <input asp-for="InterestRate" class="form-control" id="InterestRate" readonly />
                        <span asp-validation-for="InterestRate" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <div class="form-group mb-3">
                <label asp-for="LoanAmount" class="form-label">Loan Amount (LKR)</label>
                <input asp-for="LoanAmount" class="form-control" />
                <span asp-validation-for="LoanAmount" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="DurationMonths" class="form-label">Duration (Months)</label>
                <input asp-for="DurationMonths" class="form-control" />
                <span asp-validation-for="DurationMonths" class="text-danger"></span>
            </div>

            <div class="form-group mb-3">
                <label asp-for="Status" class="form-label">Status</label>
                <select asp-for="Status" class="form-control"
                        asp-items="@(new SelectList(Enum.GetNames(typeof(LoanStatus))))">
                    <option value="">Select Status Type</option>
                </select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>

            <div class="form-group mt-4 text-center">
                <div class="text-end mb-3">
                    <a asp-action="Index" class="btn btn-danger px-4 ms-2" id="cancelButton">Cancel</a>
                    <button type="submit" class="btn btn-primary px-4" id="submitLoanButton">Submit</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Include the confirmation modal -->
<partial name="_ConfirmationModal" />

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        const form = document.getElementById('addLoanForm');
        const initialValues = {};
        let isFormDirty = false;

        function storeInitialValues() {
            const inputs = form.querySelectorAll('input, select');
            inputs.forEach(input => {
                initialValues[input.name] = input.value;
            });
        }

        function checkFormDirty() {
            let isDirty = false;
            const inputs = form.querySelectorAll('input, select');
            inputs.forEach(input => {
                if (input.value !== initialValues[input.name]) {
                    isDirty = true;
                }
            });
            return isDirty;
        }

        window.addEventListener('load', storeInitialValues);

        document.getElementById('LoanType').addEventListener('change', function () {
            let rate = 0;
            switch (this.value) {
                case 'Personal': rate = 5.0; break;
                case 'Housing': rate = 3.0; break;
                case 'Vehicle': rate = 7.0; break;
                default: rate = 0; break;
            }
            document.getElementById('InterestRate').value = rate;
            isFormDirty = checkFormDirty();
        });

        form.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('change', () => {
                isFormDirty = checkFormDirty();
            });
        });

        document.getElementById('cancelButton').addEventListener('click', function (event) {
            event.preventDefault();
            if (isFormDirty) {
                const modalBody = document.querySelector('#confirmationModal .modal-body');
                modalBody.textContent = 'You have unsaved changes. Are you sure you want to cancel and discard them?';
                window.pendingAction = () => window.location.href = '@Url.Action("Index")';
                const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                modal.show();
            } else {
                window.location.href = '@Url.Action("Index")';
            }
        });

        document.getElementById('addLoanForm').addEventListener('submit', function (event) {
            event.preventDefault();
            if ($(this).valid()) { // Check if form is valid using jQuery validation
                const customerName = document.getElementById('CustomerName').value;
                const modalBody = document.querySelector('#confirmationModal .modal-body');
                modalBody.textContent = `Are you sure you want to submit the loan application for ${customerName || 'this customer'}?`;
                window.pendingForm = this;
                const modal = new bootstrap.Modal(document.getElementById('confirmationModal'));
                modal.show();
            }
        });

        document.getElementById('confirmButton').addEventListener('click', function () {
            if (window.pendingForm) {
                window.pendingForm.submit();
            } else if (window.pendingAction) {
                window.pendingAction();
            }
            const modal = bootstrap.Modal.getInstance(document.getElementById('confirmationModal'));
            modal.hide();
        });
    </script>
}